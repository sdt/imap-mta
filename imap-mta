#!/usr/bin/env perl

use Email::Simple           qw( );
use Function::Parameters    qw( :strict );
use Log::Any                qw( $log );
use Log::Any::Adapter       qw( );
use Net::IMAP::Simple       qw( );
use Path::Tiny              qw( path );
use Proc::Pidfile           qw( );
use Sys::Hostname           qw( hostname );
use Time::Piece;
use Try::Tiny;
use 5.22.0;

my $hostname = hostname;

exit(main(@ARGV));

fun main(@args) {
    # First write out any emails to the mail spool. We can do this without
    # any network connectivity, or even any config.
    Log::Any::Adapter->set('Syslog', name => 'imap-mta', facility => 'mail');

    my $spool_dir = path($ENV{IMAP_MTA_SPOOLDIR} // '/var/spool/imap-mta');
    my $pid_file  = path($ENV{IMAP_MTA_PIDFILE} // '/run/lock/imap-mta.pid');

    my $exit_code = 0;

    # If no args were specified, try to read an email from STDIN, and
    # write it out to the spool dir.
    if (my $message = do { local $/; <STDIN> }) {
        my $filename = sprintf('%d-%d', time, $$);
        my $path = $spool_dir->child($filename);
        $log->info("Writing message to $path");
        try {
            my $email = Email::Simple->new($message);
            normalise_headers($email);
            $spool_dir->child($filename)->spew($email->as_string);
        }
        catch {
            $log->error("Writing message to $path failed: $_");
            $exit_code = 3;
        };
        return $exit_code if $exit_code;
    }

    # Now that we've written out any incoming emails, we can safely bomb out if
    # our config is missing.
    if (my @missing = grep { !$ENV{$_} }
                qw( IMAP_MTA_HOST IMAP_MTA_USER IMAP_MTA_PASSWORD )) {
        $log->error('Missing config: ' . join(', ', @missing));
        return 2;
    }

    # Now before we process the queue, make sure we're the only one doing so.
    # This will quietly exit if another instance already exists.
    my $pp = Proc::Pidfile->new(pidfile => $pid_file, silent => 1);

    try {
        process_queue($spool_dir);
    }
    catch {
        chomp;
        $log->error($_);
        $exit_code = 4;
    };
    return $exit_code;
}

fun process_queue($spool_dir) {
    # Now see if there are any messages in the spool dir.
    my @files = $spool_dir->children;
    if (@files == 0) {
        $log->info('Mail queue empty');
        return;
    }
    $log->info('Processing mail queue');

    my $imap = Net::IMAP::Simple->new($ENV{IMAP_MTA_HOST}, use_ssl => 1)
        or die $Net::IMAP::Simple::errstr . "\n";
    $imap->login($ENV{IMAP_MTA_USER}, $ENV{IMAP_MTA_PASSWORD})
        or die $imap->errstr . "\n";

    my $mbox = $ENV{IMAP_MTA_MAILBOX} // "local/$hostname";
    if (!$imap->mailboxes($mbox)) {
        $imap->create_mailbox($mbox) or die $imap->errstr . "\n";
    }

    for my $file (@files) {
        $log->info("Sending $file");
        my $message = $file->slurp;
        $imap->put($mbox, $message) or die $imap->errstr . "\n";

        $file->remove;
    }
    $log->info('Processing mail queue complete');
    return;
}

fun normalise_headers($email) {
    if (! grep { $_ eq 'From' } $email->header_names) {
        my $from = $ENV{IMAP_MTA_FROM} // "email\@$hostname";
        $email->header_set('From', $from);
    }

    if (! grep { $_ eq 'Date' } $email->header_names) {
        my $date = localtime->strftime('%a, %d %b %Y %T %z');
        $email->header_set('Date', $date);
    }
}

fun usage() {
    die "usage: $0 [run-queue]\n";
}
